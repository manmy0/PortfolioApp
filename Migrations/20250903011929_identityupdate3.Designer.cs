// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioApp.Models;

#nullable disable

namespace PortfolioApp.Migrations
{
  
    [Migration("20250903011929_identityupdate3")]
    partial class identityupdate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Certificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Pitch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PortfolioApp.Models.Cdl", b =>
                {
                    b.Property<int>("CdlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cdlId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CdlId"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("lastUpdated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("CdlId")
                        .HasName("PK__CDL__3158CC6E6C1BD4BB");

                    b.ToTable("CDL", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.Competency", b =>
                {
                    b.Property<long>("CompetencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("competencyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompetencyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lastUpdated")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<string>("LinkToIndicators")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("linkToIndicators");

                    b.Property<long?>("ParentCompetencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("parentCompetencyId");

                    b.HasKey("CompetencyId");

                    b.ToTable("Competency", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.CompetencyTracker", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<long>("CompetencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("competencyId");

                    b.Property<string>("Level")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Emerging")
                        .HasColumnName("level");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateOnly>("DateEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("dateEnd")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("DateStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("dateStart")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Evidence")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("evidence");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lastUpdated")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<string>("SkillsReview")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("skillsReview");

                    b.HasKey("UserId", "CompetencyId", "Level");

                    b.HasIndex("CompetencyId");

                    b.ToTable("CompetencyTracker", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.ContactsOfInterest", b =>
                {
                    b.Property<long>("ContactOfInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContactOfInterestId"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactOfInterestId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ContactOfInterestId" }, "UQ_ContactsOfInterest_Id")
                        .IsUnique();

                    b.ToTable("ContactsOfInterest", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.Goal", b =>
                {
                    b.Property<long>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("goalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GoalId"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<bool>("Complete")
                        .HasColumnType("bit")
                        .HasColumnName("complete");

                    b.Property<string>("CompletionNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("completionNotes");

                    b.Property<DateOnly>("DateSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("dateSet")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<string>("Learnings")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("learnings");

                    b.Property<string>("Progress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("progress");

                    b.Property<DateOnly?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("startDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Timeline")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("timeline");

                    b.HasKey("GoalId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "GoalId" }, "UQ_Goal_goalId")
                        .IsUnique();

                    b.ToTable("Goal", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.GoalStep", b =>
                {
                    b.Property<long>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("stepId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StepId"));

                    b.Property<long>("GoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("goalId");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("step");

                    b.HasKey("StepId", "GoalId");

                    b.HasIndex("GoalId");

                    b.HasIndex(new[] { "StepId" }, "UQ_GoalSteps_stepId")
                        .IsUnique();

                    b.ToTable("GoalSteps");
                });

            modelBuilder.Entity("PortfolioApp.Models.IndustryContactInfo", b =>
                {
                    b.Property<long>("ContactInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("contactInfoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContactInfoId"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint")
                        .HasColumnName("contactId");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contactDetails");

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contactType");

                    b.HasKey("ContactInfoId", "ContactId");

                    b.HasIndex("ContactId");

                    b.HasIndex(new[] { "ContactInfoId" }, "UQ_IndustryContactInfo_Id")
                        .IsUnique();

                    b.ToTable("IndustryContactInfo", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.IndustryContactLog", b =>
                {
                    b.Property<long>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("contactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContactId"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company");

                    b.Property<DateOnly?>("DateMet")
                        .HasColumnType("date")
                        .HasColumnName("dateMet");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.HasKey("ContactId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ContactId" }, "UQ_IndustryContactLog_contactId")
                        .IsUnique();

                    b.ToTable("IndustryContactLog", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.Networking", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<long>("NetworkingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("networkingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NetworkingId"));

                    b.Property<string>("ElevatorPitch")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("elevatorPitch");

                    b.Property<DateOnly>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("lastUpdated")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "NetworkingId");

                    b.HasIndex(new[] { "NetworkingId" }, "UQ_Networking_networkingId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "UQ_Networking_userId")
                        .IsUnique();

                    b.ToTable("Networking", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.NetworkingEvent", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("eventId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventId"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<DateTimeOffset?>("Date")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("details");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "EventId" }, "UQ_NetworkingEvent_eventId")
                        .IsUnique();

                    b.ToTable("NetworkingEvent", (string)null);
                });

            modelBuilder.Entity("PortfolioApp.Models.NetworkingQuestion", b =>
                {
                    b.Property<long>("NetworkingQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("networkingQuestionsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NetworkingQuestionsId"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question");

                    b.HasKey("NetworkingQuestionsId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "NetworkingQuestionsId" }, "UQ_NetworkingQuestions_networkingQuestionsId")
                        .IsUnique();

                    b.ToTable("NetworkingQuestions");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioApp.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetUserToken", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.CompetencyTracker", b =>
                {
                    b.HasOne("PortfolioApp.Models.Competency", "Competency")
                        .WithMany("CompetencyTrackers")
                        .HasForeignKey("CompetencyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompetencyTracker_Competency");

                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithMany("CompetencyTrackers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CompetencyTracker_AspNetUsers");

                    b.Navigation("Competency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.ContactsOfInterest", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithMany("ContactsOfInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactsOfInterest_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.Goal", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Goal_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.GoalStep", b =>
                {
                    b.HasOne("PortfolioApp.Models.Goal", "Goal")
                        .WithMany("GoalSteps")
                        .HasForeignKey("GoalId")
                        .HasPrincipalKey("GoalId")
                        .IsRequired()
                        .HasConstraintName("FK_GoalSteps_Goal");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("PortfolioApp.Models.IndustryContactInfo", b =>
                {
                    b.HasOne("PortfolioApp.Models.IndustryContactLog", "Contact")
                        .WithMany("IndustryContactInfos")
                        .HasForeignKey("ContactId")
                        .HasPrincipalKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_IndustryContactInfo_IndustryContactLog");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("PortfolioApp.Models.IndustryContactLog", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithMany("IndustryContactLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_IndustryContactLog_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.Networking", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithOne("Networking")
                        .HasForeignKey("PortfolioApp.Models.Networking", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Networking_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.NetworkingEvent", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithMany("NetworkingEvents")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_NetworkingEvent_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.NetworkingQuestion", b =>
                {
                    b.HasOne("PortfolioApp.Models.AspNetUser", "User")
                        .WithMany("NetworkingQuestions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_NetworkingQuestions_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("PortfolioApp.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("CompetencyTrackers");

                    b.Navigation("ContactsOfInterests");

                    b.Navigation("Goals");

                    b.Navigation("IndustryContactLogs");

                    b.Navigation("Networking");

                    b.Navigation("NetworkingEvents");

                    b.Navigation("NetworkingQuestions");
                });

            modelBuilder.Entity("PortfolioApp.Models.Competency", b =>
                {
                    b.Navigation("CompetencyTrackers");
                });

            modelBuilder.Entity("PortfolioApp.Models.Goal", b =>
                {
                    b.Navigation("GoalSteps");
                });

            modelBuilder.Entity("PortfolioApp.Models.IndustryContactLog", b =>
                {
                    b.Navigation("IndustryContactInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
